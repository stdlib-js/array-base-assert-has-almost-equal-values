{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isComplex128Array from '@stdlib/array-base-assert-is-complex128array';\nimport isComplex64Array from '@stdlib/array-base-assert-is-complex64array';\nimport isBooleanArray from '@stdlib/array-base-assert-is-booleanarray';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport reinterpret128 from '@stdlib/strided-base-reinterpret-complex128';\nimport reinterpret64 from '@stdlib/strided-base-reinterpret-complex64';\nimport reinterpretBoolean from '@stdlib/strided-base-reinterpret-boolean';\nimport isAlmostEqualF32 from '@stdlib/number-float32-base-assert-is-almost-equal';\nimport isAlmostEqualF64 from '@stdlib/number-float64-base-assert-is-almost-equal';\nimport isAlmostEqual from '@stdlib/assert-is-almost-equal';\n\n\n// FUNCTIONS //\n\n/**\n* Tests if two arrays have respective elements which are approximately equal within a specified number of ULPs (units in the last place).\n*\n* @private\n* @param {Collection} x - first input array\n* @param {Collection} y - second input array\n* @param {NonNegativeInteger} maxULP - maximum allowed ULP difference\n* @param {Function} fcn - function which tests approximate equality\n* @returns {boolean} boolean indicating if both arrays have respective elements which are approximately equal\n*\n* @example\n* import base from '@stdlib/number-float64-base-assert-is-almost-equal';\n*\n* var x = [ 0, 0, 1, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = internal( x, y, 1, base );\n* // returns true\n*\n* @example\n* import base from '@stdlib/number-float64-base-assert-is-almost-equal';\n*\n* var x = [ 0, 0, 0, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = internal( x, y, 1, base );\n* // returns false\n*/\nfunction internal( x, y, maxULP, fcn ) {\n\tvar i;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !fcn( x[ i ], y[ i ], maxULP ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n* Tests if two arrays have respective elements which are approximately equal within a specified number of ULPs (units in the last place).\n*\n* @private\n* @param {Object} x - first input array object\n* @param {Object} y - second input array object\n* @param {NonNegativeInteger} maxULP - maximum allowed ULP difference\n* @param {Function} fcn - function which tests approximate equality\n* @returns {boolean} boolean indicating if both arrays have respective elements which are approximately equal\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n* import assert from '@stdlib/assert-is-almost-equal';\n*\n* var x = arraylike2object( toAccessorArray( [ 0, 0, 1, 0 ] ) );\n* var y = arraylike2object( toAccessorArray( [ 0, 0, 1, 0 ] ) );\n*\n* var out = accessors( x, y, 0, assert );\n* // returns true\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n* import assert from '@stdlib/assert-is-almost-equal';\n*\n* var x = arraylike2object( toAccessorArray( [ 0, 0, 0, 0 ] ) );\n* var y = arraylike2object( toAccessorArray( [ 0, 0, 1, 0 ] ) );\n*\n* var out = accessors( x, y, 1, assert);\n* // returns false\n*/\nfunction accessors( x, y, maxULP, fcn ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yget;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\n\txget = x.accessors[ 0 ];\n\tyget = y.accessors[ 0 ];\n\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( !fcn( xget( xdata, i ), yget( ydata, i ), maxULP ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Tests if two arrays have respective elements which are approximately equal within a specified number of ULPs (units in the last place).\n*\n* @param {Collection} x - first input array\n* @param {Collection} y - second input array\n* @param {NonNegativeInteger} maxULP - maximum allowed ULP difference\n* @returns {boolean} boolean indicating if both arrays have respective elements which are approximately equal\n*\n* @example\n* var x = [ 0, 0, 1, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = hasAlmostEqualValues( x, y, 0 );\n* // returns true\n*\n* @example\n* var x = [ 0, 0, 0, 0 ];\n* var y = [ 0, 0, 1, 0 ];\n*\n* var out = hasAlmostEqualValues( x, y, 1 );\n* // returns false\n*/\nfunction hasAlmostEqualValues( x, y, maxULP ) {\n\tvar FLG;\n\tvar xo;\n\tvar yo;\n\tvar xr;\n\tvar yr;\n\n\tif ( x.length !== y.length ) {\n\t\treturn false;\n\t}\n\txo = arraylike2object( x );\n\tyo = arraylike2object( y );\n\tif ( xo.accessorProtocol || yo.accessorProtocol ) {\n\t\tFLG = 2;\n\n\t\t// If provided boolean arrays, reinterpret the arrays to avoid using accessors to access array elements...\n\t\tif ( isBooleanArray( x ) ) {\n\t\t\tif ( isBooleanArray( y ) ) {\n\t\t\t\treturn internal( reinterpretBoolean( x, 0 ), reinterpretBoolean( y, 0 ), maxULP, isAlmostEqualF64 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\treturn accessors( xo, yo, maxULP, isAlmostEqual ); // general accessors should always use general comparison\n\t\t}\n\t\t// If provided a complex number array, reinterpret as a real typed array and test interleaved real and imaginary components...\n\t\tif ( isComplex128Array( x ) ) {\n\t\t\txr = reinterpret128( x, 0 );\n\t\t\tFLG -= 1;\n\t\t} else if ( isComplex64Array( x ) ) {\n\t\t\txr = reinterpret64( x, 0 );\n\t\t\tFLG -= 1;\n\t\t}\n\t\tif ( isComplex128Array( y ) ) {\n\t\t\tyr = reinterpret128( y, 0 );\n\t\t\tFLG -= 1;\n\t\t} else if ( isComplex64Array( y ) ) {\n\t\t\tyr = reinterpret64( y, 0 );\n\t\t\tFLG -= 1;\n\t\t}\n\t\tif ( FLG === 0 ) {\n\t\t\t// Determine whether we should use double-precision or single-precision comparison...\n\t\t\tif ( xr.BYTES_PER_ELEMENT === 8 || yr.BYTES_PER_ELEMENT === 8 ) {\n\t\t\t\treturn internal( xr, yr, maxULP, isAlmostEqualF64 );\n\t\t\t}\n\t\t\treturn internal( xr, yr, maxULP, isAlmostEqualF32 );\n\t\t}\n\t\treturn accessors( xo, yo, maxULP, isAlmostEqual ); // general accessors should always use general comparison\n\t}\n\t// Determine whether we should use double-precision or single-precision comparison...\n\tif ( x.BYTES_PER_ELEMENT === 4 && y.BYTES_PER_ELEMENT === 4 ) {\n\t\treturn internal( x, y, maxULP, isAlmostEqualF32 );\n\t}\n\treturn internal( x, y, maxULP, isAlmostEqual ); // default to general comparison\n}\n\n\n// EXPORTS //\n\nexport default hasAlmostEqualValues;\n"],"names":["internal","x","y","maxULP","fcn","i","length","accessors","xdata","ydata","xget","yget","data","hasAlmostEqualValues","FLG","xo","yo","xr","yr","arraylike2object","accessorProtocol","isBooleanArray","reinterpretBoolean","isAlmostEqualF64","isAlmostEqual","isComplex128Array","reinterpret128","isComplex64Array","reinterpret64","BYTES_PER_ELEMENT","isAlmostEqualF32"],"mappings":";;2iCAgEA,SAASA,EAAUC,EAAGC,EAAGC,EAAQC,GAChC,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAIJ,EAAEK,OAAQD,IAC1B,IAAMD,EAAKH,EAAGI,GAAKH,EAAGG,GAAKF,GAC1B,OAAO,EAGT,OAAO,CACR,CAkCA,SAASI,EAAWN,EAAGC,EAAGC,EAAQC,GACjC,IAAII,EACAC,EACAC,EACAC,EACAN,EAQJ,IANAG,EAAQP,EAAEW,KACVH,EAAQP,EAAEU,KAEVF,EAAOT,EAAEM,UAAW,GACpBI,EAAOT,EAAEK,UAAW,GAEdF,EAAI,EAAGA,EAAIG,EAAMF,OAAQD,IAC9B,IAAMD,EAAKM,EAAMF,EAAOH,GAAKM,EAAMF,EAAOJ,GAAKF,GAC9C,OAAO,EAGT,OAAO,CACR,CA2BA,SAASU,EAAsBZ,EAAGC,EAAGC,GACpC,IAAIW,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAKjB,EAAEK,SAAWJ,EAAEI,SAGpBS,EAAKI,EAAkBlB,GACvBe,EAAKG,EAAkBjB,GAClBa,EAAGK,kBAAoBJ,EAAGI,kBAC9BN,EAAM,EAGDO,EAAgBpB,GACfoB,EAAgBnB,GACbF,EAAUsB,EAAoBrB,EAAG,GAAKqB,EAAoBpB,EAAG,GAAKC,EAAQoB,GAE3EhB,EAAWQ,EAAIC,EAAIb,EAAQqB,IAG9BC,EAAmBxB,IACvBgB,EAAKS,EAAgBzB,EAAG,GACxBa,GAAO,GACIa,EAAkB1B,KAC7BgB,EAAKW,EAAe3B,EAAG,GACvBa,GAAO,GAEHW,EAAmBvB,IACvBgB,EAAKQ,EAAgBxB,EAAG,GACxBY,GAAO,GACIa,EAAkBzB,KAC7BgB,EAAKU,EAAe1B,EAAG,GACvBY,GAAO,GAEK,IAARA,EAE0B,IAAzBG,EAAGY,mBAAoD,IAAzBX,EAAGW,kBAC9B7B,EAAUiB,EAAIC,EAAIf,EAAQoB,GAE3BvB,EAAUiB,EAAIC,EAAIf,EAAQ2B,GAE3BvB,EAAWQ,EAAIC,EAAIb,EAAQqB,KAGN,IAAxBvB,EAAE4B,mBAAmD,IAAxB3B,EAAE2B,kBAC5B7B,EAAUC,EAAGC,EAAGC,EAAQ2B,GAEzB9B,EAAUC,EAAGC,EAAGC,EAAQqB,GAChC"}